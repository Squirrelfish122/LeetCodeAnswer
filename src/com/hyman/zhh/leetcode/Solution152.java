package com.hyman.zhh.leetcode;

/**
 * Created by hyman.zhh at 2020/05.
 * <p>
 * https://leetcode-cn.com/problems/maximum-product-subarray/
 * 152. 乘积最大子数组
 * 给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。
 * <p>
 * <p>
 * <p>
 * 示例 1:
 * <p>
 * 输入: [2,3,-2,4]
 * 输出: 6
 * 解释: 子数组 [2,3] 有最大乘积 6。
 * 示例 2:
 * <p>
 * 输入: [-2,0,-1]
 * 输出: 0
 * 解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。
 */
public class Solution152 {

    /**
     * 方法一：动态规划
     * 思路和算法
     * <p>
     * 如果我们用 fmax(i) 开表示以第 i 个元素结尾的乘积最大子数组的乘积，a 表示输入参数 nums，那么根据「53. 最大子序和」的经验，我们很容易推导
     * 出这样的状态转移方程：
     * <p>
     * fmax(i) = max( fmax(i-1) * a_i, a_i)
     * <p>
     * 它表示以第 i 个元素结尾的乘积最大子数组的乘积可以考虑 a_i, 加入前面的 fmax(i−1) 对应的一段，或者单独成为一段，这里两种情况下取最大值。
     * 求出所有的 fmax(i) 之后选取最大的一个作为答案。
     * <p>
     * 可是在这里，这样做是错误的。为什么呢？
     * <p>
     * 因为这里的定义并不满足「最优子结构」。具体地讲，如果 a={5,6,−3,4,−3}，那么此时 fmax 对应的序列是 {5,30,−3,4,−3}，按照前面的算法我们
     * 可以得到答案为30，即前两个数的乘积，而实际上答案应该是全体数字的乘积。我们来想一想问题出在哪里呢？问题出在最后一个−3 所对应的 fmax 的值既
     * 不是 −3，也不是 4×−3，而是 5×6×(−3)×4×(−3)。所以我们得到了一个结论：当前位置的最优解未必是由前一个位置的最优解转移得到的。
     * <p>
     * 我们可以根据正负性进行分类讨论。
     * <p>
     * 考虑当前位置如果是一个负数的话，那么我们希望以它前一个位置结尾的某个段的积也是个负数，这样就可以负负得正，并且我们希望这个积尽可能「负得更多」，
     * 即尽可能小。如果当前位置是一个正数的话，我们更希望以它前一个位置结尾的某个段的积也是个正数，并且希望它尽可能地大。于是这里我们可以再维护一个
     * fmin(i)，它表示以第 i 个元素结尾的乘积最小子数组的乘积，那么我们可以得到这样的动态规划转移方程：
     * <p>
     * fmax(i) = max( fmax(i-1) * a_i, fmin(i-1) * a_i, a_i)
     * fmin(i) = min( fmax(i-1) * a_i, fmin(i-1) * a_i, a_i)
     * <p>
     * 它代表第 i 个元素结尾的乘积最大子数组的乘积 fmax(i)，可以考虑把 a_i加入第 i−1 个元素结尾的乘积最大或最小的子数组的乘积中，二者加上 a_i，
     * 三者取大，就是第 i 个元素结尾的乘积最大子数组的乘积。第 i 个元素结尾的乘积最小子数组的乘积 fmin(i) 同理。
     * <p>
     * 易得这里的渐进时间复杂度和渐进空间复杂度都是 O(n)。
     * <p>
     * 考虑优化空间。
     * <p>
     * 由于第 i 个状态只和第 i−1 个状态相关，根据「滚动数组」思想，我们可以只用两个变量来维护 i−1 时刻的状态，一个维护 fmax，一个维护 fmin 。
     * 细节参见代码。
     * <p>
     * <p>
     * 复杂度分析
     * <p>
     * 记 nums 元素个数为 n。
     * <p>
     * 时间复杂度：程序一次循环遍历了 nums，故渐进时间复杂度为 O(n)。
     * <p>
     * 空间复杂度：优化后只使用常数个临时变量作为辅助空间，与 n 无关，故渐进空间复杂度为 O(1)。
     *
     * @param nums
     * @return
     */
    public int maxProduct(int[] nums) {
        int max = nums[0], min = nums[0], answer = nums[0];
        for (int i = 1; i < nums.length; i++) {
            int m = max, n = min;
            max = Math.max(m * nums[i], Math.max(n * nums[i], nums[i]));
            min = Math.min(m * nums[i], Math.min(n * nums[i], nums[i]));
            answer = Math.max(answer, max);
        }
        return answer;
    }

    public static void main(String[] args) {
        Solution152 solution = new Solution152();
        System.out.println(solution.maxProduct(new int[]{-4, -3, -2}));
    }


}
